#!/usr/bin/python3
""" Code generator for derivs.hxx

/*!************************************************************************
 * \\file flexible.hxx.in.py
 *
 * Wrapper for fields for different stagger locations
 *
 **************************************************************************
 * Copyright 2018
 *    B.D.Dudson, S.Farley, M.V.Umansky, X.Q.Xu, D. Schw√∂rer
 *
 * Contact: Ben Dudson, bd512@york.ac.uk
 *
 * This file is part of BOUT++.
 *
 * BOUT++ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BOUT++ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with BOUT++.  If not, see <http://www.gnu.org/licenses/>.
 *
 **************************************************************************/

"""

import jinja2
import itertools
from copy import deepcopy as copy

# Get data from fieldops
import gen_fieldops as field

field3D = field.Field('Field3D', ['x', 'y', 'z'])
field2D = field.Field('Field2D', ['x', 'y'])
fieldperp = field.Field('FieldPerp', ['x', 'z'])
boutreal = field.Field('BoutReal', [])

fields = [field3D, field2D, boutreal] ## fieldperp,


print("""
/*!************************************************************************
 * This file is autogenerated - see  flexible.hxx.in.py
 **************************************************************************/

#pragma once

#ifndef __FLEXIBLE_H__
#define __FLEXIBLE_H__

#include <bout_types.hxx>
#include <bout/deprecated.hxx>
//class Field2D;
//class Field3D;
#include <field2d.hxx>
#include <field3d.hxx>
#include <field_data.hxx>
#include <bout/dataiterator.hxx>
#include <boutexception.hxx>

const char * strLocation(CELL_LOC);
const Field2D interp_to(const Field2D&,CELL_LOC);
const Field3D interp_to(const Field3D&,CELL_LOC);

/// Template for having one field at different locations. If a Field
/// is not yet known for that location, it will be created and
/// cached. It is further possible to provide the staggered fields, if
/// it is e.g. crated from an analytical expression.
template <typename F>
class Flexible: public FieldData{
  typedef unsigned int uint;
public:
  Flexible(const F & main){
    init(main);
  };
  template <typename... Args>
  Flexible(Args... args) {
    F * main = new F(args...);
    init(*main);
    owner[mainid]=true;
  }
  /// Get a const reference of the field at the specific location. If
  /// the CELL_LOC is CELL_DEFAULT the mainlocation will be returned.
  const F & get(CELL_LOC loc_){
    if (loc_ == CELL_DEFAULT){
      return *fields[mainid];
    }
    uint loc=getId(loc_);
    if (fields[loc] == nullptr){
      if (fields[0] == nullptr){
	fields[0]=new F(interp_to((*fields[mainid]),CELL_CENTRE));
	owner[mainid]=true;
      }
      if (loc != mainid) {
	fields[loc]=new F(interp_to(*fields[mainid],loc_));
	owner[mainid]=true;
      }
    }
    return *fields[loc];
  };
  /// Set a part of the Flexible Field.
  /// If the main field is set, then, all other fields are
  /// invalidated. If an other location is set, then, it is assumed
  /// that the this is in sync with the main field.
  const F & set(const F & field){
    uint loc = getId(field.getLocation());
    if (loc == mainid){
      clean(true);
    } else {
      if (fields[loc] != nullptr && owner[loc])
	delete fields[loc];
    }
    fields[loc]=&field;
    owner[loc]=false;
  };
  //DEPRECATED(operator const F &() ) {
  operator const F &() {
    return *fields[mainid];
  };
  // DEPRECATED
  const BoutReal & operator()(int x, int y) {
    return fields[mainid]->operator()(x,y);
  };
  // DEPRECATED
  const BoutReal & operator[](const DataIterator & i) {
    return fields[mainid]->operator[](i);
  };
  const BoutReal & operator[](const Indices & i) {
    return fields[mainid]->operator[](i);
  };
  // FieldData stuff
  virtual void accept(FieldVisitor &v){
    //#warning // Using workaround for const
    ((F*)fields[mainid])->accept(v);
  }
  virtual bool isReal() const{
    return fields[mainid]->isReal();
  }
  virtual bool is3D() const {
    return fields[mainid]->isReal();
  }
  virtual int byteSize() const {
    return fields[mainid]->byteSize();
  }
  virtual int BoutRealSize() const {
    return fields[mainid]->BoutRealSize();
  }
  virtual void doneComms() {
    ((F*)fields[mainid])->doneComms();
    clean(false);
  }; // Notifies that communications done
  virtual void applyBoundary(bool init=false) {
    //#warning //Using workaround for const
    for (uint i=0;i<num_fields;++i){
      if (fields[i]){
	((F*)fields[i])->applyBoundary(init);
      }
    }
  }
  virtual void applyTDerivBoundary() {
    throw BoutException("Not implemented");
  };
  void allocate(){
    ((F*)fields[mainid])->allocate();
  }""")
template_inplace = jinja2.Template("""\
{% if field == 'BoutReal' %}\
  Flexible<F>& operator{{operator}}=({{field}} rhs) {
    ((F*)fields[mainid])->operator{{operator}}=(rhs);
    clean(false);
  };
{% else %}\
  Flexible<F>& operator{{operator}}=(const {{field}} & rhs) {
    if (mainid == getId(rhs.getLocation())){
      ((F*)fields[mainid])->operator{{operator}}=(rhs);
    } else {
      throw BoutException("Not yet implemtented!");
    }
    clean(false);
  };
{% endif %}\
""")
for operator, operator_name in field.operators.items():
    for rhs in fields:
        print(template_inplace.render(operator=operator,field=rhs),end='')
print("""
private:
  // Helper function to get index of location.
  uint getId(CELL_LOC loc_){
    uint loc = static_cast<uint>(loc_)-1;
    if ( loc > num_fields || loc < 0){
      throw BoutException("Unexpeted Fieldlocation! (Info: I got %d - %s)",loc,strLocation(loc_));
    }
    return loc;
  };
  void init(const F&main){
    mainloc=main.getLocation();
    mainid = getId(mainloc);
    for (uint i=0;i<num_fields;++i){
      fields[i]=nullptr;
    }
    fields[mainid]=&main;
    owner[mainid]=false;
  }
  void clean(bool include_main){
    for (uint i=0;i<num_fields;++i){
      if (include_main && i == mainid)
	continue;
      if (fields[i] != nullptr){
	if (owner[i]){
	  delete fields[i];
	}
	fields[i]=nullptr;
      }
    }
  }
  // Number of field locations we support
  static const uint num_fields=4;
  // The pointers to the fields. Some may be null
  const F * fields[num_fields];
  // Are we the owner of the fields?
  bool owner[num_fields];
  // The mainlocation
  CELL_LOC mainloc;
  // The id of the mainlocation
  uint mainid;
};


""")

template_rhs = jinja2.Template("""\
{% if lhs == 'BoutReal' %}\

{{template}} {{out}} operator{{operator}}({{lhs}} lhs, Flexible<{{rhs}}> &rhs) {
  return lhs {{operator}} rhs.get(CELL_DEFAULT);
};
{% else %}\

{{template}} {{out}} operator{{operator}}(const {{lhs}} &lhs, Flexible<{{rhs}}> &rhs) {
  return lhs {{operator}} rhs.get(lhs.getLocation());
};
{% endif %}\
{% if lhs == out and False %}\
{{template}}//{{out}} & {{lhs}}::operator{{operator}}=( Flexible<{{rhs}}> &rhs) {
  return this->operator {{operator}}= (rhs.get(lhs.getLocation()));
};
{% endif %}\
""")
template_lhs = jinja2.Template("""\
{% if rhs == 'BoutReal' %}\

{{template}} {{out}} operator{{operator}}(Flexible<{{lhs}}> &lhs, {{rhs}} rhs) {
  return lhs.get(CELL_DEFAULT) {{operator}} rhs;
};
{% else %}\

{{template}} {{out}} operator{{operator}}(Flexible<{{lhs}}> &lhs, const {{rhs}} &rhs) {
  return lhs.get(rhs.getLocation()) {{operator}} rhs;
};
{% endif %}\
""");

for operator, operator_name in field.operators.items():
    template_args = {
        'template': 'template <typename F>\n',
        'operator': operator,
        'out': 'F',
        'lhs': 'F',
        'rhs': 'F',
    }
    print(template_lhs.render(**template_args),end='')
    print(template_rhs.render(**template_args),end='')

for lhs, rhs in itertools.product(fields, fields):
    # We don't have to define F F operations - done via template
    if lhs == rhs :
        continue
    rhs = copy(rhs)
    lhs = copy(lhs)
    out = field.returnType(rhs, lhs)

    for operator, operator_name in field.operators.items():

        template_args = {
            'template': 'inline',
            'operator': operator,
            'out': out,
            'lhs': lhs,
            'rhs': rhs,
        }
        if lhs != "BoutReal":
            print(template_lhs.render(**template_args),end='')
        if rhs != "BoutReal":
            print(template_rhs.render(**template_args),end='')



print("""

#endif""")
